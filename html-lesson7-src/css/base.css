:root {
	--green: #1D9D73;
	--offset: 15px;
}

html {
	font-size: 10px;
	/* base multiplication value */
}

body {
	font-family: 'Ubuntu', sans-serif;
	font-weight: 300;
	color: #888;
	font-size: 16px;
}

h1,
h2,
h3,
.h1,
.h2,
.h3 {
	font-weight: 300;
	color: #333;
}

h1,
.h1 {
	font-size: 5.5rem;
	margin: 3rem 0;
}

h2,
.h2 {
	font-size: 35px;
	margin: 20px 0;
}

h3,
.h3 {
	font-size: 26px;
	margin: 16px 0;
}

strong,
.strong {
	font-weight: 400;
}

em,
.em {
	font-weight: 300;
	font-style: italic;
}

p {
	font-weight: 300;
	margin: 0 16px;
}

/* etc */
.content-text ul {
	list-style-type: disc;
	padding-left: 50px;
}

.container {
	max-width: 1170px;
	padding: 10px 30px;
	margin: 0 auto;
}

.row {
	display: flex;
	flex-wrap: wrap;
	margin: 0 calc(var(--offset) * -1);
}

.col {
	margin: var(--offset);
	box-sizing: border-box;
}

.btn {
	display: inline-block;
	padding: 10px 20px;
	cursor: pointer;
	text-decoration: none;
	border-radius: 10px;
}

.btn-green {
	background: var(--green);
	color: #fff;
}

@media screen and (max-width: 768px) {
	html {
		font-size: 7px;
	}
}

@media screen and (max-width: 560px) {
	.container {
		padding: 10px var(--offset);
	}
}

/* Также переменные хороши, когда нам нужно что-то растянуть на весь экран, а вёрстка не позволяет это сделать. Например, дизайнер нам говорит, что когда пользователи заходят с девайса с очень узким дисплеем, то лучше ещё сократить расстояние по бокам, а то по 15px это слишком много, когда у него всего 320px. При этом мы не можем просто так взять и сделать это расстояние меньше. Потому, что если мы пропишем больше отрицательные margin, куда проваливаются блоки, либо уменьшим padding у контейнера, то сразу появится горизонтальный скролл. Но всё меняется, если мы используем переменную "offset". И теперь, как мы видим горизонтального скролла не будет, потому, что и горизонтальные padding у .container уменьшились, и положительные и отрицательные margin уменьшились. */
@media screen and (max-width: 400px) {
	:root {
		--offset: 8px;
	}
}